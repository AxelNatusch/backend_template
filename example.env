# Application Environment
# Sets the overall operating mode of the application.
# Recommended values: "development", "staging", "production".
# - "development": Enables debug features, verbose logging, and often uses local/mocked services.
# - "staging": A pre-production environment closely mirroring production.
# - "production": Optimized for performance and security, with minimal logging by default.
ENVIRONMENT=development

# Network Configuration
# Defines the port on which the application will listen for incoming connections.
# Default is 8000 if not specified.
PORT=8000

# Database
# Connection string for the application's primary database.
# Format depends on the database type (e.g., PostgreSQL, MySQL, SQLite).
# For SQLite (local file-based database), the format is: sqlite:///./path_to_your_database_file.db
# Example for PostgreSQL: DATABASE_URL=postgresql://user:password@host:port/dbname
DATABASE_URL=sqlite:///./test.db # Default for local development using a file named test.db in the project root

## INITIAL ADMIN USER IN DB (For initial setup scripts or seeding)
# These variables can be used by scripts to create an initial administrative user
# when the application or database is first set up.
# IMPORTANT: For production, use strong, unique passwords and consider managing this through a secure seeding process.
ADMIN_USERNAME=admin
ADMIN_EMAIL=admin@example.com
ADMIN_PASSWORD=admin # CHANGE THIS IN A REAL ENVIRONMENT

# CORS (Cross-Origin Resource Sharing)
# Comma-separated list of allowed origins (URLs) that can make requests to the API.
# This is a security measure to prevent unwanted cross-site requests.
# Use "*" to allow all origins (generally not recommended for production).
# Example: CORS_ORIGINS=http://localhost:3000,https://yourfrontend.com
CORS_ORIGINS=http://localhost:3000,http://localhost:8000

# Logging
# Configuration for application logging can be placed here if needed.
# For example, LOG_LEVEL=INFO, LOG_FORMAT=json etc.
# (Currently no specific logging variables, but this is a common section)

## JWT (JSON Web Token) Settings - For Authentication
# These settings are critical for securing your application's authentication mechanism.

# JWT_SECRET_KEY: A strong, unique secret key used to sign and verify JWTs.
# IMPORTANT: This MUST be changed to a long, random, and secret string in production.
# Anyone with this key can forge tokens. Keep it secure!
# You can generate one using: openssl rand -hex 32
JWT_SECRET_KEY=REPLACE_ME_WITH_A_STRONG_RANDOM_SECRET

# JWT_ALGORITHM: The algorithm used to sign the JWTs. HS256 is common.
JWT_ALGORITHM=HS256

# JWT_ACCESS_TOKEN_EXPIRE_MINUTES: Lifetime of an access token in minutes.
# Access tokens are typically short-lived.
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# JWT_REFRESH_TOKEN_EXPIRE_DAYS: Lifetime of a refresh token in days.
# Refresh tokens are used to obtain new access tokens and are typically longer-lived.
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7